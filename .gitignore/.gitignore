//在对二叉树进行操作的时候我们使用递归的方法进行，但是我们不想让用户看到具体的操作过程所以我们在公有域中创建一个入口函数供用户使用并
    //在私有域中使用了二次调用的方法先创建一个
    //空的方法，在他下面使用带根节点的的构造函数，使二叉式能够从根节点依次向下遍历

    /* 
        1.二分搜索树的插入
            
        2.二分搜素树的查找

        3.二分搜索树的遍历

        4.深度广度优先遍历
             广度优先遍历又叫层序遍历，在使用层序遍历的时侯我们需要用到队列来实现，为什么叫层序遍历呢？是因为在每一个节点他都会遍历自己
             的子节点，接着遍历兄弟节点的子节点，这样一来就展现出一层一层遍历效果来。
             实现原理是：
                利用队列的的性质，首先根节点入队，根节点出队(对输出节点进行操作),接着根节点的左右孩子点入队，左孩子出队，左孩子的子节点
                入队，右孩子出队，有孩子的子节点入队。
            这样就可以实现层序遍历了。
        5.删除最小值，最大值
            利用二分搜素哦树的性质可知每一个节点的左孩子都比根节点大，右孩子都比根节点小
            要找其中的最大值与最小值只需要寻找根节点的最左孩子与右孩子
            删除最大节点与最小节点 


    */
    /*
        c++中queue库的用法：

            back()返回最后一个元素

            empty()如果队列空则返回真

            front()返回第一个元素

            pop()删除第一个元素

            push()在末尾加入一个元素

            size()返回队列中元素的个数
        */

    #include <iostream>
    #include<queue>

    using namespace std;

    // 二分搜索树
    template <typename Key, typename Value>
    class BST{

    private:
        // 树中的节点为私有的结构体, 外界不需要了解二分搜索树节点的具体实现
        struct Node{
            Key key;
            Value value;
            Node *left;
            Node *right;
      
            Node(Key key, Value value){
                this->key = key;
                this->value = value;
                this->left = this->right = NULL;
            }
            Node( Node * node ){
                this -> key = key;
                this ->value = value;
                this ->right = right;
                this -> left = left;
            }

        };

        Node *root; // 根节点
        int count;  // 树中的节点个数

    public:
        // 构造函数, 默认构造一棵空二分搜索树
        BST(){
            root = NULL;
            count = 0;
        }
        ~BST(){
            destory(root);
        }

        // 返回二分搜索树的节点个数
        int size(){
            return count;
        }

        // 返回二分搜索树是否为空
        bool isEmpty(){
            return count == 0;
        }

        // 向二分搜索树中插入一个新的(key, value)数据对
        void insert(Key key, Value value){
            root = insert(root, key, value);
        }
        //使用递归的方法查找从root根下的所有元素是否包含
        bool contain(Key key){
             return contain(root,key); 
        }
        //在搜索时能够搜索到key所对应的值，如果搜索不到则返回false
        Value* search(key key){
            return search(root,key);
        }
        //前序遍历
        void preOrder(){
            preOrder(root);
        } 
        //中序遍历
        void inOrder(){
            inOrder(root);
        }
        //后续遍历
        void postOrder(){
            postOrder(root);
        }
        //层序遍历
        void levelOrder(){
            //声明队列元素名字为q
            queue<Node*> q;
            q.push(root);//将根节点入队
            while( !q.empty() ){//判断队列是否为空

                Npde *node= q.front();   //将头节点的指针赋值给node
                q.pop();//弹出队列第一个元素
                cout<<node->key<<endl;
                //如果节点存在孩子节点则将子节点入队
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
            //寻找最小值
            void minmum(){
                assert( count != 0 );
                Node * minmum = minmum( root );
                return minmum->key;
            }
            //删除最小节点
            void removeMin(){
                if( root )
                    root = removeMin( root );

            }
            //寻找最大节点
            void maxmum(){
                assert( count != 0 );
                Node* maxmum = maxmum(root);
                return maxmum->key; 
            }
            //删除最大节点
            void removeMax(){
                if( root) 
                    root = removeMax( root );
            }
            //删除键值为key的节点，将结果返回为root
            void remove(Key key){
                root = remove(root,key);
            }

        }

         
    private:
        // 向以node为根的二分搜索树中, 插入节点(key, value), 使用递归算法
        // 返回插入新节点后的二分搜索树的根
        Node* insert(Node *node, Key key, Value value){

            if( node == NULL ){
                count ++;
                return new Node(key, value);
            }

            if( key == node->key )
                node->value = value;
            else if( key < node->key )
                node->left = insert( node->left , key, value);
            else    // key > node->key
                node->right = insert( node->right, key, value);

            return node;
        }

        bool contain(Node* node , Key key ){

            if( node == NULL )
                return false;
            if( key == node->key)
                return true;
            else if( key > node -> key )
                return contain(node->right,key);
            else if( key < node -> left )
                return contain( node -> left ,key );
        }

        Value* search( Node* node , Key key ){

            if(node == NULL )
                return false;
            if( key == node -> key )
                return &(node->value);
            else if( key > node -> key )
                return search(node -> right,key);
            else if( key < node -> key )
                return search(node -> left,key);
        }

        //对以node为节点为根的二叉搜索树进行前序遍历
        void preOrder( Node* node ){
            if( node != NULL ){
                cout  << node->key <<endl;
                preOrder(node->left);
                preOrder(node->right);
            }
        } 
        //中序遍历
        void inOrder( Node * node ){
            if(  node != NULL ){
                inOrder(node->left);
                cout << node->key << endl;
                inOrder(node->right)<<endl;
            }
        }
        //后序遍历 
        void postOrder( Node * node ){
            if( node != NULL ){
                postOrder(node->left);
                postOrder(node->right);
                cout <<node->key<<endl;
            }
        }
        //后序遍历删除二叉树
        void destory( Node * node ) {
            if ( node != NULL ){
                destory(node->left);
                destory(node->right);

                delete node;
                count--;
            }
        }
        //以node为根的二叉树中最小值
        Node* minmum(Node* node){

            if( node->left == NULL)
                return node->key;
            return minmum(node->left);
        }
        //删除以node为根的最小节点
        //返回删除后的二分查找树的根
        Node* removeMin( Node* node ){
            //删除最小节点时如果node节点的左孩子为空 ，那么寻找node的右孩子并将右孩子作为上一节点的左孩子，返回值为删除的掉的节点的右孩子
            if( node -> left == NULL ){
                Node* rightNode = node->right;
                delete node;
                count--;
                return rightNode;
            }
            node->left = removeMin(node->left);
            return node;
        }

        //以node为根的最大节点
        Node* maxmum(Node * node ){
             if( node -> right == NULL )
                return node->key;
            return maxNode(node->right);
        }

        //删除以node为根的最大节点
        //返回删除后二叉树的根
        Node* removeMax( Node* node ){
            if( node ->right == NULL ){
                Node* leftNode = node->left;
                delete node;
                count--;
                return leftNode;

            }

            node->right = removeMax(node->right);
            return node;            
        }

        //删除以node为根的二叉树的键值为key的节点，并返回删除后的根节点
        Node * remove( Node * node , Key key ){
            if( node == NULL )
                return NULL;

            if( key > node->key )  //大于的情况
                node->right = remove( node-> right , key );
            else    if( key < node -> left )//小于的情况
                return node ->left = remove( node->left , key );
            else//刚好等于的情况
            {   //如果node的左右孩子都为空那么函数进入这里，因为node的左孩子也为NULL，所以返回值也为空，所以不影响 
                if( node -> left == NULL ){//要删除的节点的左孩子的节点为空时
                    Node * rightNode = node ->right;
                    delete node;
                    count--;
                    return rightNode; 
                } 

                if( node -> right == NULL ){//要删除的节点的右孩子的节点为空时
                    Node * leftNode = node -> left;
                    delete node;
                    count--;
                    return leftNode;
                }

                Node * delNode = node;
                //由于在下面的removeMin中将node删除了，所以在这里我们复制一下node右子树中的最小节点
                Node * successor = new Node( minmum( node -> right ) );
                count++;
                //这里将node右子树的最小节点删掉，并且返回node的右子树的根也就是node->right
                successor -> right = removeMin( node -> right );
                successor -> left = node -> left;

                delete delNode;
                count--;

                return successor; 


            }



        } 


    };


    int main() {

        return 0;
    }
